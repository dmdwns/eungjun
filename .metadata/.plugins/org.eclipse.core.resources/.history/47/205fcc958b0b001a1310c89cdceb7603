package user;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import action.JDBC_Close;



public class UserDAO {
	private static final String DRIVER = "oracle.jdbc.OracleDriver";
	private static final String URL = "jdbc:oracle:thin:@192.168.0.72:1521:xe";
	private static final String USER = "PROJECT";
	private static final String PASSWORD = "PROJECTPW";
	
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	static {
		try {
			Class.forName(DRIVER);
			System.out.println(">> JDBC 드라이버 로딩 성공");
		} catch (ClassNotFoundException e) {
			System.out.println("[예외발생] 드라이버 로딩 실패!!!");
		}
	}
	
	public int join(UserDTO user) {

		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("INSERT INTO USERS ");
			sql.append("	(USER_ID, USER_NAME, PASSWORD, ADDRESS, EMAIL, CARD_NUMBER, PHONE, PRICE) ");
			sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?) ");
			pstmt = conn.prepareStatement(sql.toString());

			int idx = 1;
			pstmt.setString(idx++, user.getId());
			pstmt.setString(idx++, user.getName());
			pstmt.setString(idx++, user.getPassword());
			pstmt.setString(idx++, user.getAddress());
			pstmt.setString(idx++, user.getEmail());
			pstmt.setString(idx++, user.getCnum());
			pstmt.setString(idx++, user.getPhone());
			pstmt.setInt(idx++, user.getPrice());

			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1; // 회원가입 실패
	}
	
	public int updateName(String name, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET USER_NAME = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, name);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	
	public int updatePassword(String password, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET PASSWORD = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, password);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	public int updateAddress(String address, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET ADDRESS = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, address);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	public int updateEmail(String email, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET EMAIL = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, email);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	
	public int updateCnum(String cnum, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET CARD_NUMBER = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, cnum);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	public int updatePhone(String phone, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET PHONE = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, phone);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	public int updatePrice(int price, String id) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE USERS SET PRICE = ? WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setInt(1, price);
			pstmt.setString(2, id);
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		}
		return -1;
	}
	
	
	
	public int delete(UserDTO user) {
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("DELETE FROM USERS ");
			sql.append("	WHERE USER_ID = ? AND PASSWORD = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, user.getId());
			pstmt.setString(2, user.getPassword());
			
			return pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			action.JDBC_Close.closeConnStmt(conn, pstmt);
		
	}
		return -1;
	}	
	
	public boolean checkId(String id) {
		boolean result = false;

		try {
			//DB연결 - Connection 객체 생성(DB와 연결된)
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			//PreparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT USER_ID FROM USERS WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		
		return result;
	}
	public boolean checkEmail(String email) {
		boolean result = false;
		
		try {
			//DB연결 - Connection 객체 생성(DB와 연결된)
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			//PreparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT EMAIL FROM USERS WHERE EMAIL = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, email);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		
		return result;
	}
	public boolean checkCnum(String cnum) {
		boolean result = false;
		
		try {
			//DB연결 - Connection 객체 생성(DB와 연결된)
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			//PreparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT CARD_NUMBER FROM USERS WHERE CARD_NUMBER = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, cnum);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		
		return result;
	}
	public boolean checkPhone(String phone) {
		boolean result = false;
		
		try {
			//DB연결 - Connection 객체 생성(DB와 연결된)
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			//PreparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT PHONE FROM USERS WHERE PHONE = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, phone);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		
		return result;
	}
	
	public boolean checkIdPassword(String id, String password) {
		boolean result = false;

		try {
			//DB연결 - Connection 객체 생성(DB와 연결된)
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			//PreparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT USER_ID, PASSWORD FROM USERS WHERE USER_ID = ? AND PASSWORD = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, id);
			pstmt.setString(2, password);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				result = true;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		
		return result;
	}
	
	public int accountPrice (String id) {
		int price = 0;
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT PRICE FROM USERS WHERE USER_ID = ?");
			pstmt = conn.prepareStatement(sql.toString());
			
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {//데이터가 있으면
				price = rs.getInt("PRICE");
						
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close
			JDBC_Close.closeConnStmtRs(conn, pstmt, rs);
		}		
		return price;
	}
	
}
