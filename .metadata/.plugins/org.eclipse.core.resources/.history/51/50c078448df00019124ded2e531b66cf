package com.mystudy.ex01_arrayList;

import java.util.ArrayList;
import java.util.Collections;

import javax.swing.plaf.synth.SynthSeparatorUI;

public class ArrayListExam {

	public static void main(String[] args) {
		// List 계열 - ArrayList - 배열의 속성과 List 속성을 가짐 
	    //	- List 인터페이스를 상속 구현(implements)한 클래스 
        //	- List 인터페이스를 확장 (extends)해서 인터페이스
		
		ArrayList list1 = new ArrayList();
		System.out.println("list1.size() : " + list1.size());
		
		
		list1.add(new Integer(5)); // 크기가 아니라 지금 값넣고 있는것임 
		list1.add(1); // int -> Integer 자동형변환 되어 입력됨 
		list1.add(new Integer(5)); // 값에 대한 중복은 허용 
		list1.add(new Integer(6));
		list1.add(new Integer(7));
		
		
		System.out.println(list1.toString());
		System.out.println("list1.size() : " + list1.size());
		
		list1.add(0,100); // 인덱스 위치에 데이터 추가 (삽입)
		System.out.println("0인덱스 100추가후: " + list1.toString());
		list1.set(0, 999); // 인덱스 위치의 데이터 수정(변경)
		System.out.println("0 인덱스 999 set 후  : " + list1);
		
		list1.remove(0); // 0번 인덱스 위치의 데이터 삭제 
		System.out.println("0 인덱스 remove후 : " + list1 );
		
		
	
		
		//list1.remove(5); // 숫자 5를 삭제하겠다가 아닌 5번인덱스를 삭제 
	    list1.remove(new Integer(5));
	    System.out.println("숫자 Integer 5 삭제후 :  " + list1);
		System.out.println("-----------------------------");
		
		Object obj = list1.get(0); // obj 타입으로 받는다 
	    System.out.println("0번 인덱스 값 : " +obj);
	    
		
		// 데이터 바꾸기 거꾸로 다시 정렬 
		Collections.reverse(list1);
		System.out.println(list1.toString());
		System.out.println("reverse 적용후 ");
		
		System.out.println("--------------------------------------");
		ArrayList list2 = new ArrayList(list1.subList(1, 4)); //4번 인덱스 전까지 
		System.out.println("list2 : " + list2);
		
		System.out.println("------ Collections.sort() ---------");
	    System.out.println("list1 : " + list1);	
	    Collections.sort(list1); // 앞에 정의하는곳에 static이 붙어있는것 
	    // 오름차순 정렬 
	    System.out.println(" sort() 후 list1 : " + list1 );
	    
	    // integer 타입만 해줌 우선;;
	    Collections.sort(list2);
//	    list2.add("홍길동 ");
	    System.out.println("sort() 후 list2 : " + list2);
	    
	    // 오름차순 정렬 
	    // 내림차순 정렬 없음 
	    
	    System.out.println("----- Collection.reverse() ----- ");
	    // reverse() : 처음과 끝 위치 서로 바꾸는 형태로 동작(정렬과는 무관 )
	    Collections.reverse(list1);
	    System.out.println("reverse() : list1 : " + list1);
	    
	    System.out.println("=====================================");
	    System.out.println("list1 : "  + list1);
	    
	    
	    
		
	    
	    
	}

}
