

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import orders.OrdersVO;
import reservation.JDBC_close;






public class Picks {
	
	private static boolean bl = true;
	Scanner scan = new Scanner(System.in);
	OrdersVO ovo = null;
	
	//접속 변수들
	private static final String DRIVER = "oracle.jdbc.OracleDriver";
	private static final String URL = "jdbc:oracle:thin:@192.168.0.72:1521:xe";
	private static final String USER = "PROJECT";
	private static final String PASSWORD = "PROJECTPW";
	
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	//드라이버 접속
	static {
		try {
			Class.forName(DRIVER);
			System.out.println("드라이버 접속 성공");
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 접속 실패");
		}
	}
	
	//고른 메뉴 데이터를 select 해서 VO에 저장해서 리턴
	public PicksVO picksMenu(String res_id, String user_id, String menu_id/*식당아이디,유저아이디, 메뉴아이디받고 실행*/) {
		//리턴 할 값 변수선언
		PicksVO ps = null;
		
		try {
			conn = DriverManager.getConnection(URL,USER,PASSWORD);
			StringBuilder sql = new StringBuilder();
			//메뉴테이블 에서 선택한 메뉴 select
			sql.append("SELECT U.CARD_NUMBER, M.* FROM USERS U, RESTAURANTS_MENU M ");
			sql.append("WHERE MENU_ID = ? ");
			sql.append("AND USER_ID = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			
			int count = 0;
			boolean b = true;
				
					
						System.out.println("개수를 정해주세요");
					while(true) {	
						try {
							count = scan.nextInt();
							pstmt.setString(1, menu_id);
							pstmt.setString(2, user_id);
							//sql 실행
							rs = pstmt.executeQuery();
							break;
						} catch (InputMismatchException e) {
							System.out.println("잘못된 값");
							break;
						}
					}
						
						
						
					
				
			if(rs.next()) {
				//셀렉한 데이터를 VO에 저장
				ps = new PicksVO(res_id, user_id, rs.getInt("PRICE")*count, menu_id, rs.getString("MENU_NAME"),count, rs.getString("CARD_NUMBER"));
				System.out.println("데이터 저장");
				System.out.println(ps.toString());
			}
			
			insertOne(ps);
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC_close.closeConnStmtRs(conn, pstmt, rs);
		}
		
		//리턴 처리
		return ps;
	}
	//VO에 선택한 장바구니 데이터베이스 저장
	public int insertOne(PicksVO picks) {
		int result = 0;
		try {
			//DB연결 작업
			conn = DriverManager.getConnection(URL,USER,PASSWORD);
			
			//SQL문장을 작성해서 Statement에 전달하고 SQL문 실행 요청
			StringBuilder sql = new StringBuilder();
			sql.append("INSERT INTO PICKS ");
			sql.append("(RES_ID, USER_ID, MENU_PRICE, MENU_ID, MENU_NAME, MENU_COUNT, CARD_NUMBER ) ");
			sql.append("VALUES(?, ?, ?, ?, ?, ?, ?) ");
			pstmt = conn.prepareStatement(sql.toString());
			//?(바인딩 변수)에  값 매칭 시키기
			
			pstmt.setString(1, picks.getRes_id());
			pstmt.setString(2, picks.getUser_id());
			pstmt.setInt(3, picks.getPrice());
			pstmt.setString(4, picks.getMenu_id());
			pstmt.setString(5, picks.getMenu_name());
			pstmt.setInt(6, picks.getMenu_count());
			pstmt.setString(7, picks.getCard_number());
			
			//SQL 실행 요청 -INSERT, UPDATE, DELETE : executeUpdate()
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		} finally {
			JDBC_close.ConnPstmt(conn, pstmt);
		}
		
		return result;
	}
	

	
	
	
	
	//장바구니 항목 전체 조회
	public List<PicksVO> selectAll(String user_id) {
		List<PicksVO> list = new ArrayList<>();
		
		//DB연결 - Connection 객체 생성(DB와 연결된)
		try {
			conn = DriverManager.getConnection(URL,USER,PASSWORD);
			//preparedStatement 객체 생성하고 SQL문 실행
			StringBuilder sql = new StringBuilder();
			
			sql.append("SELECT P.*,ROWNUM  FROM ");
			sql.append(" PR_VIEW P ");
			sql.append("WHERE USER_ID = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, user_id);
			rs = pstmt.executeQuery();
			
			//SQL 문 실행 결과에 대한 처리
			while(rs.next()) {
				
				list.add(new PicksVO(rs.getString("USER_ID"),
						rs.getString("USER_NAME"),
						rs.getString("RES_NAME"),
						rs.getInt("MENU_PRICE"),
						rs.getString("MENU_NAME"),
						rs.getInt("MENU_COUNT"),
						rs.getInt("ROWNUM"),
						rs.getString("MENU_ID")));
			}
			
			System.out.println();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			//사용객체 close 처리
			JDBC_close.closeConnStmtRs(conn, pstmt, rs);
		} 
		
		return list;
	}
	
	public int deleteOne(String user_id, String menu_id) {
		int result = 0;
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("DELETE FROM PICKS ");
			sql.append("WHERE USER_ID = ? ");
			sql.append("AND MENU_ID = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			
			
			pstmt.setString(1, user_id);
			pstmt.setString(2, menu_id);
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC_close.ConnPstmt(conn, pstmt);
		}
			
		return result;
	}
	
	public int deleteAll(List<OrdersVO> list) {
		int result = 0;
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append("DELETE FROM PICKS ");
			sql.append("WHERE USER_ID = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			
			for(OrdersVO vo : list) {
				pstmt.setString(1, vo.getUserId());
				
				result += pstmt.executeUpdate();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC_close.ConnPstmt(conn, pstmt);
		}
		
		return result;
		
	}
	
	public int updateCount(String user_id, String menu_id) {
		int result = 0;
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			
			StringBuilder sql = new StringBuilder();
			sql.append(" UPDATE PICKS ");
			sql.append(" SET MENU_COUNT = ? ,");
			sql.append("  MENU_PRICE = (SELECT PRICE FROM RESTAURANTS_MENU WHERE MENU_ID = ? ) * ? ");
			sql.append(" WHERE MENU_ID = ? ");
			sql.append(" AND USER_ID = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			System.out.println("변경할 숫자를 입력해주세요");
			int count = scan.nextInt();
			pstmt.setInt(1, count);
			pstmt.setString(2, menu_id);
			pstmt.setInt(3, count);
			pstmt.setString(4, menu_id);
			pstmt.setString(5, user_id);
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC_close.ConnPstmt(conn, pstmt);
		}
			
		return result;
	}
	
	
	
	
}


