package Business;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import menu.MenuVO;

public class BusinessClass {

	private static final String DRIVER = "oracle.jdbc.OracleDriver";
	private static final String URL = "jdbc:oracle:thin:@192.168.0.72:1521:xe";
	private static final String USER = "PROJECT";
	private static final String PASSWORD = "PROJECTPW";

	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;

	Scanner scan = new Scanner(System.in);
	BusinessVO bvo = new BusinessVO(0);

	public void Business() {
		String name = "";
		boolean or = true;
		int number = -1;
		while (or) {
			if (name == "") {
				System.out.println("\n======================\n");
				System.out.println("1. 온라인 입점신청");
				System.out.println("2. 사장님 로그인");
				System.out.println("0. 종료");
			} else {
				System.out.println("\n----------------------\n");
				System.out.println(name + " 사장님 환영합니다.");
				System.out.println("1. 사업자 정보,음식점 정보(계정관리)");
				System.out.println("2. 메뉴 수정");
				System.out.println("0. 메인화면");

			}
			System.out.print(">>");
			try {
				number = Integer.parseInt(scan.nextLine());
			} catch (Exception e) {
				System.out.println("다시 시작합니다.");
				Business();
			}
			switch (number) {
			case 1:
				if (name != "") {
					Bupdate(name);
				} else {
					System.out.println("전화 문의");
				}
				break;
			case 2:
				if (name != "") {
					menuUpdate(name);
				} else {
					name = BusinessIdCheck();
				}
				break;

			case 0:
				or = false;
				break;
			default:
				break;
			}

		}
	}

	public void Bupdate(String name) {
		int ch = -1;
		String change = null;
		int numInt = -1;
		try {
			while (true) {
				conn = DriverManager.getConnection(URL, USER, PASSWORD);
				pstmt = conn.prepareStatement("select RES_KIND_ID,RES_NAME,ADDRESS,RES_TABLE,RES_TEL"
						+ " from restaurants where res_name = ?");
				pstmt.setString(1, name);

				rs = pstmt.executeQuery();

				while (rs.next()) {
					int res_kind_id = -1;
					String kind = null;
					res_kind_id = rs.getInt("RES_KIND_ID");
					if (res_kind_id == 1) {
						kind = "한식";
					} else if (res_kind_id == 2) {
						kind = "중식";
					} else if (res_kind_id == 3) {
						kind = "일식";
					} else if (res_kind_id == 4) {
						kind = "분식";
					} else if (res_kind_id == 5) {
						kind = "기타";
					}
					System.out.println("1. 업종: " + kind + "\n" + "2. 상호: " + rs.getString("RES_NAME") + "\n" + "3. 주소: "
							+ rs.getString("ADDRESS") + "\n" + "4. 번호: " + rs.getString("RES_TEL") + "\n" + "5. 예약석: "
							+ rs.getInt("RES_TABLE"));
					System.out.println();
				}

				System.out.println("1. 업종 변경");
				System.out.println("2. 상호 변경");
				System.out.println("3. 주소 변경");
				System.out.println("4. 전화번호 변경");
				System.out.println("5. 예약석 변경");
				System.out.println("0. 뒤로가기");
				System.out.print(">>");
				try {
					ch = Integer.parseInt(scan.nextLine());
				} catch (Exception e) {
					System.out.println("값을 다시 입력하세요");
					Bupdate(name);
				}
				switch (ch) {
				case 1:

					System.out.print("변경하실 업종은 선택하세요 " + "\n1.한식\n2.중식\n3.일식\n4.분식\n5.기타\n>> ");
					change = scan.nextLine();
					numInt = Integer.parseInt(change);
					pstmt = conn.prepareStatement("UPDATE RESTAURANTS SET RES_KIND_ID= ?  WHERE RES_NAME =  ? ");
					pstmt.setInt(1, numInt);
					pstmt.setString(2, name);

					pstmt.executeUpdate();
					System.out.println("변경이 완료 되었습니다.");
					Bupdate(name);
					break;

				case 2:
					System.out.print("바꾸실 상호명을 입력하세요:");
					change = scan.nextLine();
					pstmt = conn.prepareStatement("UPDATE RESTAURANTS SET RES_NAME= ?  WHERE RES_NAME =  ? ");
					pstmt.setString(1, change);
					pstmt.setString(2, name);
					pstmt.executeUpdate();
					System.out.println("변경이 완료 되었습니다.");
					Bupdate(change);

					break;
				case 3:
					System.out.print("바꾸실 주소를 입력하세요:");
					change = scan.nextLine();
					numInt = Integer.parseInt(change);
					pstmt = conn.prepareStatement("UPDATE RESTAURANTS SET ADDRESS= ?  WHERE RES_NAME =  ? ");
					pstmt.setInt(1, numInt);
					pstmt.setString(2, name);
					pstmt.executeUpdate();
					System.out.println("변경이 완료 되었습니다.");
					Bupdate(name);
					break;
				case 4:
					System.out.print("바꾸실 번호를 입력하세요:");
					change = scan.nextLine();
					pstmt = conn.prepareStatement("UPDATE RESTAURANTS SET RES_TEL = ?  WHERE RES_NAME =  ? ");
					pstmt.setString(1, change);
					pstmt.setString(2, name);
					pstmt.executeUpdate();
					System.out.println("변경이 완료 되었습니다.");
					Bupdate(name);
					break;
				case 5:
					System.out.print("변경하실 예약석 수 를 입력하세요:");
					change = scan.nextLine();
					numInt = Integer.parseInt(change);
					pstmt = conn.prepareStatement("UPDATE RESTAURANTS SET RES_TABLE= ?  WHERE RES_NAME =  ? ");
					pstmt.setInt(1, numInt);
					pstmt.setString(2, name);
					pstmt.executeUpdate();
					System.out.println("변경이 완료 되었습니다.");
					Bupdate(name);
					break;
				case 0:
					break;
				default:
					System.out.println("값을 다시 입력하세요");
				}
				break;
			}

		} catch (SQLException e) {
			System.out.println("값을 다시 입력하세요");
			Bupdate(name);
		}
	}

	public String BusinessIdCheck() {
		int count = 0;
		String name = "";
		String res_id = "";
		System.out.print("상호명:");
		name = scan.nextLine();
		System.out.print("발급받은  res_id를 입력하세요:");
		res_id = scan.nextLine();
		String query = "select * from restaurants where res_name = ? and res_id = ?";
		count++;
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, name);
			pstmt.setString(2, res_id);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getString("RES_NAME");

			} else if (count < 5) {
				System.out.print("다시입력하세요" + "\n남은횟수" + (5 - count) + "\n");
				BusinessIdCheck();
				name = "";
			}
			count = 0;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return name;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////

	// 내꺼
	public void menuUpdate(String name) {
		while (true) {
			try {
				conn = DriverManager.getConnection(URL, USER, PASSWORD);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			String kind = "";
			System.out.println("\n메뉴를 변경합니다.");
			System.out.println("1. 수정\n2. 추가\n3. 삭제\n4. 메뉴 조회");
			int ch = Integer.parseInt(scan.nextLine());

			switch (ch) {

			case 1:
				System.out.print("수정할 메뉴의 이름을 입력하세요 : ");
				kind = scan.nextLine();
				try {
					StringBuilder sql = new StringBuilder();
					sql.append("SELECT MENU_NAME FROM RESTAURANTS_MENU M, RESTAURANTS R"
							+ " WHERE M.RES_ID = R.RES_ID AND M.MENU_NAME ='" + kind + "' AND R.RES_NAME = '" + name
							+ "'");
					pstmt = conn.prepareStatement(sql.toString());
					rs = pstmt.executeQuery();
					if (rs.next()) {
						String newName = "";
						int price = 0;

						sql.delete(0, sql.length());

						System.out.println("이름 변경 전 : " + kind + ", 변경 후 : ");
						newName = scan.nextLine();

						sql.append("UPDATE RESTAURANTS_MENU SET MENU_NAME = '" + newName + "' WHERE MENU_NAME ='" + kind
								+ "'");
						pstmt = conn.prepareStatement(sql.toString());
						pstmt.executeUpdate();
						System.out.println("메뉴이름이 정상적으로 변경되었습니다.");

						sql.delete(0, sql.length());

						sql.append("SELECT PRICE FROM RESTAURANTS_MENU WHERE MENU_NAME ='" + newName + "'");
						pstmt = conn.prepareStatement(sql.toString());
						rs = pstmt.executeQuery();
						if (rs.next()) {
							price = rs.getInt("PRICE");
						}
						System.out.print("가격 변경 전 : " + price + "\n 변경 후 : ");
						price = Integer.parseInt(scan.nextLine());

						sql.delete(0, sql.length());

						sql.append("UPDATE RESTAURANTS_MENU SET PRICE = '" + price + "' WHERE MENU_NAME ='" + newName
								+ "'");
						pstmt = conn.prepareStatement(sql.toString());
						pstmt.executeUpdate();
						System.out.println("가격이 정상적으로 변경되었습니다.");
					} else {
						System.out.println("메뉴를 찾을 수 없습니다. 메뉴 수정을 취소합니다.");
						System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
						scan.nextLine();
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} catch (NumberFormatException e) {
					System.out.println("숫자만 입력 가능합니다.\n");
				}
				break;

			case 2:
				while (true) {
					try {
						String newMenu = "";
						System.out.println("추가할 메뉴의 이름을 지어주세요 : ");
						newMenu = scan.nextLine();

						int newPrice = 0;
						System.out.println("추가할 메뉴의 가격을 지어주세요 : ");
						newPrice = Integer.parseInt(scan.nextLine());

						newMenu(newMenu, newPrice, name);
						break;

					} catch (NumberFormatException e) {
						System.out.println("숫자만 입력 가능합니다.\n");
					}

				}
				break;
			case 3:
				System.out.println("삭제할 메뉴의 이름을 입력하세요 : ");
				kind = scan.nextLine();
				try {
					StringBuilder sql = new StringBuilder();
					sql.append("SELECT MENU_NAME FROM RESTAURANTS_MENU M, RESTAURANTS R"
							+ " WHERE M.RES_ID = R.RES_ID AND M.MENU_NAME ='" + kind + "' AND R.RES_NAME = '" + name
							+ "'");
					pstmt = conn.prepareStatement(sql.toString());
					rs = pstmt.executeQuery();

					while (true) {
						if (rs.next()) {
							String yesno = "";
							System.out.println(kind + " 메뉴를 삭제합니다. 삭제되면 복구가 어렵습니다. 정말로 삭제하시겠습니까? (Y/N)");
							yesno = scan.nextLine();

							if (yesno.equalsIgnoreCase("y")) {
								sql.delete(0, sql.length());
								sql.append("DELETE RESTAURANTS_MENU WHERE MENU_NAME ='" + kind + "'");
								pstmt = conn.prepareStatement(sql.toString());
								pstmt.executeUpdate();
								System.out.println("삭제되었습니다.");
								break;
							} else if (yesno.equalsIgnoreCase("n")) {
								System.out.println("취소되었습니다.");
								break;
							} else {
								System.out.println("\nY, N 으로 대답해주세요.\n");
							}
						} else {
							System.out.println("메뉴를 찾을 수 없습니다. 메뉴삭제를 취소합니다.");
							System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
							scan.nextLine();
							break;
						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				break;
			case 4:
				try {
					int num = 1;
					List<MenuVO> list = new ArrayList<MenuVO>();
					System.out.println("[현재 메뉴 목록]\n");
					System.out.println("(번호) (메뉴)      (가격)");
					System.out.println("--------------------------------------------------");
					StringBuilder sql = new StringBuilder();
					String res_id = "";
					sql.append("SELECT RES_KIND_ID, RES_ID FROM restaurants WHERE res_name = '" + name + "'");
					pstmt = conn.prepareStatement(sql.toString());
					rs = pstmt.executeQuery();
					if (rs.next()) {
						res_id = rs.getString("RES_ID");						
					}
					sql.delete(0, sql.length());
					sql.append("SELECT RES_KIND_ID, RES_ID, MENU_NAME, PRICE, MENU_ID FROM RESTAURANTS_MENU ");
					sql.append("WHERE RES_ID = '" + res_id + "'");
					pstmt = conn.prepareStatement(sql.toString());
					rs = pstmt.executeQuery();
					while (rs.next()) {
						list.add(new MenuVO(rs.getInt("RES_KIND_ID"), rs.getString("RES_ID"), rs.getString("MENU_NAME"),
								rs.getInt("PRICE"), rs.getString("MENU_ID")));
					}

					// 출력
					for (MenuVO mv : list) {
						System.out.printf("%2d. ", num);
						System.out.printf("%5s\t", mv.getMenuName());
						System.out.printf("%5s\n", mv.getMenuPrice());
						num++;
					}
					System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
					scan.nextLine();

				} catch (SQLException e) {
					e.printStackTrace();
				}
				break;
			default:
				System.out.println("\n올바른 메뉴를 선택해 주세요.\n");
			}
			break;
		}

	}

	// 내꺼
	private void newMenu(String newMenu, int newPrice, String name) {
		int[] num = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		// List<Integer> list = new ArrayList<>();
		List<BusinessVO> list = new ArrayList<>();
		int res_kind_id = 0;
		String res_id = "";
		String menu_id = "";
		try {
			list.clear();
			StringBuilder sql = new StringBuilder();
			sql.append("SELECT RES_KIND_ID, RES_ID FROM restaurants WHERE res_name = '" + name + "'");
			pstmt = conn.prepareStatement(sql.toString());
			rs = pstmt.executeQuery();

			if (rs.next()) {
				res_kind_id = rs.getInt("RES_KIND_ID");
				res_id = rs.getString("RES_ID");

				sql.delete(0, sql.length());
				sql.append("SELECT TO_NUMBER(SUBSTR(MENU_ID,4,5)), MENU_ID FROM restaurants_menu WHERE MENU_ID LIKE '"
						+ res_id + "%'");
				pstmt = conn.prepareStatement(sql.toString());
				rs = pstmt.executeQuery();
				while (rs.next()) {
					list.add(new BusinessVO(rs.getInt("TO_NUMBER(SUBSTR(MENU_ID,4,5))")));
				}
				Collections.sort(list);
				int i = 0;
				int result = 0;

				for (BusinessVO bvo : list) {
					try {
						if (bvo.getCount() != num[i]) {
							result = num[i];
							menu_id = res_id + "_" + result;
							break;
						}
						i++;
					} catch (ArrayIndexOutOfBoundsException e) {
						result = -1;
						break;
					}
				}
				if (result == 0) {
					menu_id = res_id + "_" + (list.size() + 1);

					sql.delete(0, sql.length());
					sql.append("INSERT INTO RESTAURANTS_MENU VALUES (" + res_kind_id + ", '" + res_id + "', '" + newMenu
							+ "', " + newPrice + ", '" + menu_id + "')");
					pstmt = conn.prepareStatement(sql.toString());
					pstmt.executeUpdate();
					System.out.println(newMenu + " 메뉴가  새로 추가되었습니다! (코드" + menu_id + ")");
					System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
					scan.nextLine();

				} else if (result == -1) {
					System.out.println("최대 메뉴 수를 초과하셨습니다. (최대 10, 현재 10)");
					System.out.println("메뉴 추가를 취소합니다.");
					System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
					scan.nextLine();
				} else {

					sql.delete(0, sql.length());
					scan.nextLine();
					sql.append("INSERT INTO RESTAURANTS_MENU VALUES (" + res_kind_id + ", '" + res_id + "', '" + newMenu
							+ "', " + newPrice + ", '" + menu_id + "')");
					pstmt = conn.prepareStatement(sql.toString());
					pstmt.executeUpdate();
					System.out.println(newMenu + " 메뉴가  새로 추가되었습니다! (코드 : " + menu_id + ")");
					System.out.print("\n계속하려면 엔터를 눌러주세요...\n");
					scan.nextLine();
				}

			} else {
				System.out.println("알 수 없는 문제가 발생했습니다. 메뉴 추가를 취소합니다.");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
